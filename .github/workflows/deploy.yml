name: CI/CD for User-Service

on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    name: Build, Push, and Deploy User-Service
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 생성
      - name: Create application.yml
        run: |
          mkdir ./src/main/resources || true
          cd ./src/main/resources
          rm -rf ./application.properties || true
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode  > ./application.yml
        shell: bash

      # 4. Gradle로 Spring Boot 빌드
      - name: Build Spring Boot Application
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 5. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

      # 6. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker Hub로 이미지 푸시
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest

      # 8. Rolling 배포
      - name: Rolling Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "Starting Rolling Deploy for user-service..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            
            # 기존 컨테이너를 하나씩 종료하고 새로운 컨테이너를 실행
            services=$(docker-compose ps -q user-service)
            for service in $services; do
              echo "Stopping container: $service"
              docker stop $service
              docker rm $service
            
              echo "Starting new container with latest image..."
              docker-compose -f /home/ubuntu/docker-compose.yml up -d --scale user-service=1 user-service
            
              # 상태 확인 및 대기
              echo "Waiting for user-service to be healthy..."
              sleep 15  # 서비스가 준비될 때까지 대기
            done
            
            echo "Rolling Deploy completed for user-service."
