name: CI/CD for User-Service

on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    name: Build, Push, and Deploy User-Service
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3-1. application.yml 생성
      - name: Create application.yml
        run: |
          mkdir ./src/main/resources || true
          cd ./src/main/resources
          rm -rf ./application.yml || true
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./application.yml
        shell: bash

      # 3-2. test application.yml 생성
      - name: Create application.yml
        run: |
          mkdir ./src/test/resources || true
          cd ./src/test/resources
          rm -rf ./application.yml || true
          echo "${{ secrets.APPLICATION_YML_TEST }}" | base64 --decode > ./application.yml
        shell: bash

      # 4. Gradle로 Spring Boot 빌드
      - name: Build Spring Boot Application
        run: |
          chmod +x ./gradlew
          ./gradlew test
          ./gradlew clean build -x test

      # 5. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

      # 6. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker Hub로 이미지 푸시
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest

      # 8. 무중단 배포: Rolling Deployment 구현
      - name: Rolling Deployment for User-Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "Pulling latest user-service image from DockerHub..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # 최신 user-service 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            
            echo "Starting Rolling Deployment for user-service..."
            
            # 1. 첫 번째 복제본 업데이트 (2번 복제본 유지)
            echo "Updating the first replica..."
            docker-compose -f /home/ubuntu/docker-compose.yml scale user-service=1
            docker-compose -f /home/ubuntu/docker-compose.yml up -d user-service
            sleep 10 # 대기 시간 (필요에 따라 조정)
            echo "First replica updated."
  
            # 2. 두 번째 복제본 업데이트 (1번 복제본 유지)
            echo "Updating the second replica..."
            docker-compose -f /home/ubuntu/docker-compose.yml scale user-service=2
            docker-compose -f /home/ubuntu/docker-compose.yml up -d user-service
            sleep 10 # 대기 시간 (필요에 따라 조정)
            echo "Second replica updated."

