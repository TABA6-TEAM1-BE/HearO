name: CI/CD for ApiGateway

on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    name: Build, Push, and Deploy ApiGateway
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 생성
      - name: Create application.yml
        run: |
          mkdir ./src/main/resources || true
          cd ./src/main/resources
          rm -rf ./application.properties || true
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode  > ./application.yml
        shell: bash

      # 4. Gradle로 Spring Boot 빌드
      - name: Build Spring Boot Application
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 5. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:gatewayservice .

      # 6. DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker Hub로 이미지 푸시
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:gatewayservice

      # 8. 배포 자동화: DockerHub에서 이미지 가져와 EC2에서 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:gatewayservice
            cd /home/ubuntu/config
            sudo docker-compose rm -fs gatewayservice
            sudo docker-compose up -d gatewayservice
            sudo docker image prune -f